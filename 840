class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:

        def magicsq(sub) -> bool:
            numbers = [sub[i][j] for i in range(3) for j in range(3)]
            if len(set(numbers)) != 9:
                return False
            if sorted(numbers) != list(range(1, 10)):
                return False
            currSum = sum(sub[0])
            for i in range(3):
                if sum(sub[i]) != currSum or sum(sub[j][i] for j in range(3)) != currSum:
                    return False
            if (sub[0][0] + sub[1][1] + sub[2][2] != currSum or 
                sub[0][2] + sub[1][1] + sub[2][0] != currSum):
                return False
            return True

        row = len(grid)
        col = len(grid[0])
        if row < 3 or col < 3:
            return 0
        ans = 0
        for i in range(row - 2):
            for j in range(col - 2):
                subgrid = [row[j:j+3] for row in grid[i:i+3]]
                if magicsq(subgrid):
                    ans += 1
        return ans
